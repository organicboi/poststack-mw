import express from 'express';
import cookieParser from 'cookie-parser';
import cors from 'cors';
import helmet from 'helmet';
import { config } from './common/config';
import { errorHandler } from './common/middleware/error';
import { requestLogger } from './common/middleware/logger';

// Import route controllers
import authController from './modules/auth/auth.controller';
import workspaceController from './modules/workspace/workspace.controller';
import proxyController from './modules/proxy/proxy.controller';

// Create Express app
const app = express();

// Apply security middleware
app.use(helmet({
  contentSecurityPolicy: false,
}));

// Configure CORS
app.use(cors({
  origin: config.cors.origin,
  credentials: config.cors.credentials,
}));

// Parse request body
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(cookieParser());

// Request logging
app.use(requestLogger);

// Health check endpoint
app.get('/health', (_, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: config.server.environment,
  });
});

// Apply API routes
app.use('/auth', authController);
app.use('/workspaces', workspaceController);
app.use('/api', proxyController);

// Apply error handling middleware (must be last)
app.use(errorHandler);

// Start server
const PORT = config.server.port || 5000;
app.listen(PORT, () => {
  console.log(`
  ┌─────────────────────────────────────────────────┐
  │                                                 │
  │   Middleware Server running in ${config.server.environment} mode          │
  │   http://localhost:${PORT}                          │
  │                                                 │
  └─────────────────────────────────────────────────┘
  `);
  
  console.log(`🔗 Backend URL: ${config.backend.url}`);
  console.log(`🌐 Frontend URL: ${config.frontend.url}`);
  
  if (config.serviceRole.key) {
    console.log(`🔑 SERVICE_ROLE_KEY loaded: ${config.serviceRole.key.substring(0, 10)}...`);
  } else {
    console.warn('⚠️ SERVICE_ROLE_KEY is NOT set in middleware .env');
  }
});

export default app;